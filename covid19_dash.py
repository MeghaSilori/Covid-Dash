# -*- coding: utf-8 -*-
"""Covid19_Dash.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kZ-R1XUztlZu4kdKmpDlGH9iE9afndt_

## COVID-19

The **coronavirus (COVID-19)** pandemic is the greatest global humanitarian challenge the world has faced since World War II. The pandemic virus has spread widely, and the number of cases is rising daily. The government is working to slow down its spread.

'Novel coronavirus' is a new, previously unidentified strain of coronavirus. The novel coronavirus involved in the current outbreak has been named SARS-CoV-2 by the World Health Organization (WHO). 3The disease it causes has been named “coronavirus disease 2019” (or “COVID-19”).`

   ![Coronavirus particle Image](https://media.istockphoto.com/vectors/corona-virus-covid19-banner-illustration-protective-medical-mask-and-vector-id1224508827?k=6&m=1224508827&s=170667a&w=0&h=fytt2oRlwlpfjuo_n3Nq9HE5xvgYyWIoRBAetJCIjac=)

####Importing the libraries
"""

import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pandas as pd
import requests
from datetime import datetime

raw= requests.get("https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/Coronavirus_2019_nCoV_Cases/FeatureServer/1/query?where=1%3D1&outFields=*&outSR=4326&f=json")
raw_json = raw.json()
df = pd.DataFrame(raw_json["features"])

df.head()

df["attributes"][0]

"""####Cleaning Data"""

data_list = df["attributes"].tolist()
df_final = pd.DataFrame(data_list)
df_final.set_index("OBJECTID")
df_final = df_final[["Country_Region", "Province_State", "Lat", "Long_", "Confirmed", "Deaths", "Recovered", "Active", "Last_Update"]]

df_final.head()

"""####To Convert Time """

def convertTime(t):
    t = int(t)
    return datetime.fromtimestamp(t)

df_final = df_final.dropna(subset=["Last_Update"])
df_final["Province_State"].fillna(value="", inplace=True)

df_final["Last_Update"]= df_final["Last_Update"]/1000
df_final["Last_Update"] = df_final["Last_Update"].apply(convertTime)

df_final.head()

"""####Aggregating data"""

df_total = df_final.groupby("Country_Region", as_index=False).agg(
    {
        "Confirmed" : "sum",
        "Deaths" : "sum",
        "Recovered" : "sum",
        "Active" : "sum"
    }
)

df_total = df_total.sort_values("Confirmed", ascending=False)

df_total.head()

total_confirmed = df_final["Confirmed"].sum()
total_recovered = df_final["Recovered"].sum()
total_deaths = df_final["Deaths"].sum()
total_active = df_final["Active"].sum()

df_top10 = df_total.nlargest(10, "Confirmed")
top10_countries_1 = df_top10["Country_Region"].tolist()
top10_confirmed = df_top10["Confirmed"].tolist()

df_top10 = df_total.nlargest(10, "Recovered")
top10_countries_2 = df_top10["Country_Region"].tolist()
top10_recovered = df_top10["Recovered"].tolist()

df_top10 = df_total.nlargest(10, "Deaths")
top10_countries_3 = df_top10["Country_Region"].tolist()
top10_deaths = df_top10["Deaths"].tolist()

df_top10 = df_total.nlargest(10, "Active")
top10_countries_4 = df_top10["Country_Region"].tolist()
top10_active= df_top10["Active"].tolist()

figa = make_subplots(
    rows = 1, cols = 4,

    specs=[
            [{"type": "indicator", "colspan":1}, {"type": "indicator", "colspan":1}, {"type": "indicator", "colspan":1}, {"type": "indicator", "colspan":1}],
          ]
)

figa.add_trace(
    go.Indicator(
        mode="number",
        value=total_confirmed,
        title="Confirmed Cases",
    ),
    row=1, col=1
)

figa.add_trace(
    go.Indicator(
        mode="number",
        value=total_recovered,
        title="Recovered Cases",
    ),
    row=1, col=2
)

figa.add_trace(
    go.Indicator(
        mode="number",
        value=total_deaths, 
        title="Death Cases",
    ),
    row=1, col=3
)

figa.add_trace(
    go.Indicator(
        mode="number",
        value=total_active, 
        title="Active Cases",
    ),
    row=1, col=4
)
figa.update_layout(
    template="plotly_dark",
    title = "Global COVID-19 Status (Last Updated: " + str(df_final["Last_Update"][0]) + ")",
    showlegend=True,
    legend_orientation="h"
)
figa.write_html('2.html', auto_open=True)

figa.show()

"""####Bar Graph"""

figb = make_subplots(
    rows = 4, cols = 3,

    specs=[
            [ {"type": "bar", "colspan":3}, None, None],
            [ {"type": "bar", "colspan":3}, None, None],
            [ {"type": "bar", "colspan":3}, None, None],
            [ {"type": "bar", "colspan":3}, None, None],
          ]
)

figb.add_trace(
    go.Bar(
        x=top10_countries_1,
        y=top10_confirmed, 
        name= "Confirmed Cases",
        marker=dict(color="Yellow"), 
        showlegend=True,
    ),
    row=1, col=1
)

figb.add_trace(
    go.Bar(
        x=top10_countries_2,
        y=top10_recovered, 
        name= "Recovered Cases",
        marker=dict(color="Green"), 
        showlegend=True),
    row=2, col=1
)

figb.add_trace(
    go.Bar(
        x=top10_countries_3,
        y=top10_deaths, 
        name= "Deaths Cases",
        marker=dict(color="crimson"), 
        showlegend=True),
    row=3, col=1
)
figb.add_trace(
    go.Bar(
        x=top10_countries_4,
        y=top10_active, 
        name= "Active Cases",
        marker=dict(color="orangered"), 
        showlegend=True),
    row=4, col=1
)

figb.update_layout(
    template="plotly_dark",
    title = "Bar Plot ",
    showlegend=True,
    legend_orientation="h",
    legend=dict(x=0.425, y=1.05),

)

figb.write_html('3.html', auto_open=True)

figb.show()

figc = make_subplots(
    rows = 4, cols = 3,

    specs=[
            [{"type": "scattergeo", "rowspan": 4, "colspan": 3}, None, None ],
            [    None, None, None  ],
            [    None, None, None  ],
            [    None, None, None  ],
          ]
)


message = df_final["Country_Region"] + " " + df_final["Province_State"] + "<br>"
message += "Confirmed: " + df_final["Confirmed"].astype(str) + "<br>"
message += "Deaths: " + df_final["Deaths"].astype(str) + "<br>"
message += "Recovered: " + df_final["Recovered"].astype(str) + "<br>"
message += "Active: " + df_final["Active"].astype(str) + "<br>"
message += "Last updated: " + df_final["Last_Update"].astype(str)
df_final["text"] = message

figc.add_trace(
    go.Scattergeo(
        locationmode = "country names",
        lon = df_final["Long_"],
        lat = df_final["Lat"],
        hovertext = df_final["text"],
        showlegend=False,
        marker = dict(
            size = 10,
            opacity = 0.8,
            reversescale = True,
            autocolorscale = True,
            symbol = 'circle',
            line = dict(
                width=1,
                color='rgba(102, 102, 102)'
            ),
            cmin = 0,
            color = df_final['Confirmed'],
            cmax = df_final['Confirmed'].max(),
            colorbar_title="Confirmed Cases<br>Latest Update",  
            colorbar_x = 0.07
        )

    ),
    
    row=1, col=1
)

figc.update_layout(
    template="plotly_dark",
    title = "Scatter Geo ",

    geo = dict(
            projection_type="natural earth",
            showcoastlines=True,
            landcolor="white", 
            showland= True,
            showocean = True,
            lakecolor="LightBlue"
    ),

    annotations=[
        dict(
            text="Source: https://bit.ly/3aEzxjK",
            showarrow=False,
            xref="paper",
            yref="paper",
            x=0.55,
            y=-0.1)
    ]
)

figc.write_html('4.html', auto_open=True)

figc.show()

!pip install jupyter-dash

from jupyter_dash import JupyterDash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output# Load Data

import plotly.graph_objects as go # or plotly.express as px
import base64
fig1 = go.Figure(figa)   # or any Plotly Express function e.g. px.bar(...)
fig2 = go.Figure(figb)
fig3 = go.Figure(figc)

app = JupyterDash(__name__)
app.layout = html.Div([
    html.H1("Covid 19 Dashboard  "),
    html.H2("Covid 19 "),
    html.P("The **coronavirus (COVID-19)** pandemic is the greatest global humanitarian challenge the world has faced since World War II. The pandemic virus has spread widely, and the number of cases is rising daily. The government is working to slow down its spread. 'Novel coronavirus' is a new, previously unidentified strain of coronavirus. The novel coronavirus involved in the current outbreak has been named SARS-CoV-2 by the World Health Organization (WHO). 3The disease it causes has been named “coronavirus disease 2019” (or “COVID-19”).`"),
    dcc.Graph(figure=fig1),
    dcc.Graph(figure=fig2),
    dcc.Graph(figure=fig3),
])

app.run_server(mode='external')

